
최소 스패닝 트리 : 가중치가 있는 무방향 그래프의 모든 노드를 포함하면서 사이클이 없고 가중치의 합이 최소가 되는 트리

 * 프림 알고리즘 : 시작점을 임의의 정점으로 선택하고, 이를 시작점으로 한다. 현재까지 구성된 MST의 원소에 연결된 간선 중 최소힙을 이용하여
                  가중치가 가장 작은 값을 가지는 간선을 골라 이어준 후 MST의 원소로 추가한다. 시간 복잡도는 O(ElogV)가 된다.
                  
// 프림 알고리즘 구현

#define eb emplace_back
typedef pair<int, int> pii;
typedef vector<vector<pii>> v;
typedef vector<bool> vb;

int main(void) {
	ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
	int n, a, b, cost,m,cur,ans=0;
	v g;
	g.resize(n + 1); //그래프=> 노드의 수 만큼 resize해준다.
	while (m--) {
		cin >> a >> b >> cost;
		g[a].eb(pii(cost, b)); //cost를 기준으로 최소힙에 삽입할 것이므로 cost를 앞쪽에 놓는다.
		g[b].eb(pii(cost, a));
	}
	priority_queue<pii, vector<pii>, greater<pii>>pq;
	vb visited(n + 1, false);
	cur = 1;
	rep2(i, n - 1) {
		visited[cur] = true; //방문 여부 체크
		for (pii next : g[cur]) pq.push(next);
		while (visited[pq.top().second]) pq.pop(); //이미 방문한 정점은 다시 방문하지 않도록 최소힙에서 모두 뺀다
		ans += pq.top().first; //MST의 가중치 합을 구한다
		cur = pq.top().second; //다음 노드 번호를 저장한다
		pq.pop();
	}
  cout<<ans<<'\n'; // MST의 가중치 합을 구한다.
	return 0;
}
